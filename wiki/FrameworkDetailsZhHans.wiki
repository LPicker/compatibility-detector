#summary 框架代码说明
#sidebar TableOfContentsZhHans

= 框架代码说明 =

framework.js 实现了整体检测框架，提供了三种基本检测方式：
  # `chrome_comp.CompDetect.NonScanDomBaseDetector`
  # `chrome_comp.CompDetect.ScanDomBaseDetector`
  # `chrome_comp.CompDetect.registerExistingMethodHook` 和 `chrome_comp.CompDetect.registerExistingPropertyHook`

*`NonScanDomBaseDetector`* 可以自己实现扫描节点机制，用来记录相关节点信息与其他节点比较。例如，检测某些节点是否在渲染时存在布局块重叠情况。

*`ScanDomBaseDetector`* 采用框架提供的扫描节点机制，每扫描一个节点均会调用 *`checkNode`* 方法，检测算法可以再此方法内执行。例如，检测某些节点自身布局情况或自身属性设置等。

无论 *`NonScanDomBaseDetector`* 或者 *`ScanDomBaseDetector`* 类，均有 *postAnalyze* 方法，此方法在所有检测代码执行完成后被统一调用。它可以用来做数据汇总或者检测内容补充修正等后续处理工作；当然，也可以配合 *`NonScanDomBaseDetector`* 机制实现当前检测算法自身的节点扫描分析机制。

*`chrome_comp.CompDetect.registerExistingMethodHook`* 与 *`chrome_comp.CompDetect.registerExistingPropertyHook`* 分别是 JS 脚本的钩子机制。他们分别负责*HOOK已存在的方法*和*HOOK不存在的属性*。当某方法或某属性的钩子被注册后，此方法调用时，会先调用注册的钩子程序，由钩子程序负责调用原始方法以、识别传入的实参、保存方法返回结果等内容，由开发者在钩子注册函数内实现这些内容的解析与分析。

*主要的检测模型图示*
http://img844.ph.126.net/0pFdck3OPF7nih2c-3tZGA==/1890385943590752722.jpg
http://img616.ph.126.net/8jNaDjM2N2jQlXFiVxU9Zw==/1989465135393179370.jpg
http://img.ph.126.net/CkGzdvRix97hL0Oscc_cyg==/3395151169085260845.jpg

----

= 脚本注入以及消息传递机制说明  =

* 消息传递模型图示 *
http://img616.ph.126.net/75PhJ8ad_2sKbsTiqQcrZw==/1989465135393179347.jpg